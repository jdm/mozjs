diff --git a/js/src/jit/AliasAnalysis.cpp b/js/src/jit/AliasAnalysis.cpp
index 3d5226b2af..6c80b6c499 100644
--- a/js/src/jit/AliasAnalysis.cpp
+++ b/js/src/jit/AliasAnalysis.cpp
@@ -48,7 +48,7 @@ class LoopAliasInfo : public TempObject {
 void AliasAnalysis::spewDependencyList() {
 #ifdef JS_JITSPEW
   if (JitSpewEnabled(JitSpew_AliasSummaries)) {
-    Fprinter& print = JitSpewPrinter();
+    GenericPrinter& print = JitSpewPrinter();
     JitSpewHeader(JitSpew_AliasSummaries);
     print.printf("Dependency list for other passes:\n");
 
@@ -281,7 +281,7 @@ static void IonSpewDependency(MInstruction* load, MInstruction* store,
     return;
   }
 
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.printf("Load ");
   load->printName(out);
   out.printf(" %s on store ", verb);
@@ -297,7 +297,7 @@ static void IonSpewAliasInfo(const char* pre, MInstruction* ins,
     return;
   }
 
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.printf("%s ", pre);
   ins->printName(out);
   out.printf(" %s\n", post);
@@ -385,7 +385,7 @@ bool AliasAnalysis::analyze() {
 
 #ifdef JS_JITSPEW
         if (JitSpewEnabled(JitSpew_Alias)) {
-          Fprinter& out = JitSpewPrinter();
+          GenericPrinter& out = JitSpewPrinter();
           out.printf("Processing store ");
           def->printName(out);
           out.printf(" (flags %x)\n", set.flags());
diff --git a/js/src/jit/CacheIRSpewer.cpp b/js/src/jit/CacheIRSpewer.cpp
index 8c2458b82c..5e61aa814f 100644
--- a/js/src/jit/CacheIRSpewer.cpp
+++ b/js/src/jit/CacheIRSpewer.cpp
@@ -13,8 +13,13 @@
 #  include <algorithm>
 
 #  ifdef XP_WIN
-#    include <process.h>
-#    define getpid _getpid
+#    ifdef JS_ENABLE_UWP
+#      include <processthreadsapi.h>
+#      define getpid GetCurrentProcessId
+#    else
+#      include <process.h>
+#      define getpid _getpid
+#    endif
 #  else
 #    include <unistd.h>
 #  endif
diff --git a/js/src/jit/IonAnalysis.cpp b/js/src/jit/IonAnalysis.cpp
index f42591c9bd..a27063d4e9 100644
--- a/js/src/jit/IonAnalysis.cpp
+++ b/js/src/jit/IonAnalysis.cpp
@@ -5119,7 +5119,7 @@ void jit::DumpMIRExpressions(MIRGraph& graph, const CompileInfo& info,
     return;
   }
 
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.printf("===== %s =====\n", phase);
 
   size_t depth = 2;
diff --git a/js/src/jit/JitSpewer.cpp b/js/src/jit/JitSpewer.cpp
index ab66709ff3..eb8cac754c 100644
--- a/js/src/jit/JitSpewer.cpp
+++ b/js/src/jit/JitSpewer.cpp
@@ -12,8 +12,15 @@
 #  include "mozilla/Sprintf.h"
 
 #  ifdef XP_WIN
-#    include <process.h>
-#    define getpid _getpid
+#    ifdef JS_ENABLE_UWP
+#      define UNICODE
+#      include <Windows.h>
+#      include <processthreadsapi.h>
+#      define getpid GetCurrentProcessId
+#    else
+#      include <process.h>
+#      define getpid _getpid
+#    endif
 #  else
 #    include <unistd.h>
 #  endif
@@ -336,8 +343,12 @@ AutoSpewEndFunction::~AutoSpewEndFunction() {
   mir_->graphSpewer().endFunction();
 }
 
-Fprinter& jit::JitSpewPrinter() {
+GenericPrinter& jit::JitSpewPrinter() {
+#ifdef JS_ENABLE_UWP
+  static UWPPrinter out;
+#else
   static Fprinter out;
+#endif
   return out;
 }
 
@@ -407,10 +418,18 @@ void jit::CheckLogging() {
 
   LoggingChecked = true;
 
+#ifdef JS_ENABLE_UWP
+  wchar_t wideEnvBuf[1024] = { 0 };
+  GetEnvironmentVariable(L"IONFLAGS", wideEnvBuf, sizeof(wideEnvBuf));
+  char envBuf[1024] = { 0 };
+  wcstombs(envBuf, wideEnvBuf, sizeof(envBuf));
+  char* env = &envBuf[0];
+#else
   char* env = getenv("IONFLAGS");
   if (!env) {
     return;
   }
+#endif
 
   const char* found = strtok(env, ",");
   while (found) {
@@ -515,6 +534,7 @@ void jit::CheckLogging() {
     found = strtok(nullptr, ",");
   }
 
+#ifndef JS_ENABLE_UWP
   FILE* spewfh = stderr;
   const char* filename = getenv("ION_SPEW_FILENAME");
   if (filename && *filename) {
@@ -524,7 +544,8 @@ void jit::CheckLogging() {
     MOZ_RELEASE_ASSERT(spewfh);
     setbuf(spewfh, nullptr);  // Make unbuffered
   }
-  JitSpewPrinter().init(spewfh);
+  ((Fprinter&)JitSpewPrinter()).init(spewfh);
+#endif
 }
 
 JitSpewIndent::JitSpewIndent(JitSpewChannel channel) : channel_(channel) {
@@ -539,7 +560,7 @@ void jit::JitSpewStartVA(JitSpewChannel channel, const char* fmt, va_list ap) {
   }
 
   JitSpewHeader(channel);
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.vprintf(fmt, ap);
 }
 
@@ -548,7 +569,7 @@ void jit::JitSpewContVA(JitSpewChannel channel, const char* fmt, va_list ap) {
     return;
   }
 
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.vprintf(fmt, ap);
 }
 
@@ -557,7 +578,7 @@ void jit::JitSpewFin(JitSpewChannel channel) {
     return;
   }
 
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.put("\n");
 }
 
@@ -580,7 +601,7 @@ void jit::JitSpewDef(JitSpewChannel channel, const char* str,
   }
 
   JitSpewHeader(channel);
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.put(str);
   def->dump(out);
   def->dumpLocation(out);
@@ -604,7 +625,7 @@ void jit::JitSpewHeader(JitSpewChannel channel) {
     return;
   }
 
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.printf("[%s] ", ChannelNames[channel]);
   for (size_t i = ChannelIndentLevel[channel]; i != 0; i--) {
     out.put("  ");
diff --git a/js/src/jit/JitSpewer.h b/js/src/jit/JitSpewer.h
index bea5ef8dc1..dc4767a038 100644
--- a/js/src/jit/JitSpewer.h
+++ b/js/src/jit/JitSpewer.h
@@ -160,7 +160,7 @@ class AutoSpewEndFunction {
 };
 
 void CheckLogging();
-Fprinter& JitSpewPrinter();
+GenericPrinter&& JitSpewPrinter();
 
 class JitSpewIndent {
   JitSpewChannel channel_;
diff --git a/js/src/jit/LIR.cpp b/js/src/jit/LIR.cpp
index 9555ac7a79..2bcd41d301 100644
--- a/js/src/jit/LIR.cpp
+++ b/js/src/jit/LIR.cpp
@@ -505,7 +505,7 @@ void LInstruction::assignSnapshot(LSnapshot* snapshot) {
 #ifdef JS_JITSPEW
   if (JitSpewEnabled(JitSpew_IonSnapshots)) {
     JitSpewHeader(JitSpew_IonSnapshots);
-    Fprinter& out = JitSpewPrinter();
+    GenericPrinter& out = JitSpewPrinter();
     out.printf("Assigning snapshot %p to instruction %p (", (void*)snapshot,
                (void*)this);
     printName(out);
diff --git a/js/src/jit/Lowering.cpp b/js/src/jit/Lowering.cpp
index 621c7a5a56..07aa263906 100644
--- a/js/src/jit/Lowering.cpp
+++ b/js/src/jit/Lowering.cpp
@@ -5749,7 +5749,7 @@ void LIRGenerator::visitWasmFloatConstant(MWasmFloatConstant* ins) {
 #ifdef JS_JITSPEW
 static void SpewResumePoint(MBasicBlock* block, MInstruction* ins,
                             MResumePoint* resumePoint) {
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.printf("Current resume point %p details:\n", (void*)resumePoint);
   out.printf("    frame count: %u\n", resumePoint->frameCount());
 
diff --git a/js/src/jit/RangeAnalysis.cpp b/js/src/jit/RangeAnalysis.cpp
index 36e0735ee5..73ec632f21 100644
--- a/js/src/jit/RangeAnalysis.cpp
+++ b/js/src/jit/RangeAnalysis.cpp
@@ -123,7 +123,7 @@ static inline void SpewRange(MDefinition* def) {
   if (JitSpewEnabled(JitSpew_Range) && def->type() != MIRType::None &&
       def->range()) {
     JitSpewHeader(JitSpew_Range);
-    Fprinter& out = JitSpewPrinter();
+    GenericPrinter& out = JitSpewPrinter();
     def->printName(out);
     out.printf(" has range ");
     def->range()->dump(out);
@@ -137,7 +137,7 @@ static inline void SpewTruncate(MDefinition* def,
 #ifdef JS_JITSPEW
   if (JitSpewEnabled(JitSpew_Range)) {
     JitSpewHeader(JitSpew_Range);
-    Fprinter& out = JitSpewPrinter();
+    GenericPrinter& out = JitSpewPrinter();
     out.printf("truncating ");
     def->printName(out);
     out.printf(" (kind: %s, clone: %d)\n",
@@ -321,7 +321,7 @@ bool RangeAnalysis::addBetaNodes() {
 
     if (JitSpewEnabled(JitSpew_Range)) {
       JitSpewHeader(JitSpew_Range);
-      Fprinter& out = JitSpewPrinter();
+      GenericPrinter& out = JitSpewPrinter();
       out.printf("Adding beta node for %u with range ", val->id());
       comp.dump(out);
     }
diff --git a/js/src/jit/Snapshots.cpp b/js/src/jit/Snapshots.cpp
index cfc4acf7b6..36f4763807 100644
--- a/js/src/jit/Snapshots.cpp
+++ b/js/src/jit/Snapshots.cpp
@@ -468,7 +468,7 @@ void SnapshotReader::spewBailingFrom() const {
 #  ifdef JS_JITSPEW
   if (JitSpewEnabled(JitSpew_IonBailouts)) {
     JitSpewHeader(JitSpew_IonBailouts);
-    Fprinter& out = JitSpewPrinter();
+    GenericPrinter& out = JitSpewPrinter();
     out.printf(" bailing from bytecode: %s, MIR: ", CodeName(JSOp(pcOpcode_)));
     MDefinition::PrintOpcodeName(out, MDefinition::Opcode(mirOpcode_));
     out.printf(" [%u], LIR: ", mirId_);
@@ -598,7 +598,7 @@ bool SnapshotWriter::add(const RValueAllocation& alloc) {
 
   if (JitSpewEnabled(JitSpew_IonSnapshots)) {
     JitSpewHeader(JitSpew_IonSnapshots);
-    Fprinter& out = JitSpewPrinter();
+    GenericPrinter& out = JitSpewPrinter();
     out.printf("    slot %u (%u): ", allocWritten_, offset);
     alloc.dump(out);
     out.printf("\n");
diff --git a/js/src/util/StructuredSpewer.h b/js/src/util/StructuredSpewer.h
index 047049461f..4b625089ef 100644
--- a/js/src/util/StructuredSpewer.h
+++ b/js/src/util/StructuredSpewer.h
@@ -21,8 +21,13 @@
 #  include "vm/Printer.h"
 
 #  ifdef XP_WIN
-#    include <process.h>
-#    define getpid _getpid
+#    ifdef JS_ENABLE_UWP
+#      include <processthreadsapi.h>
+#      define getpid GetCurrentProcessId
+#    else
+#      include <process.h>
+#      define getpid _getpid
+#    endif
 #  else
 #    include <unistd.h>
 #  endif
diff --git a/js/src/vm/Printer.cpp b/js/src/vm/Printer.cpp
index 427fd62e6d..8438deeb7c 100644
--- a/js/src/vm/Printer.cpp
+++ b/js/src/vm/Printer.cpp
@@ -571,4 +571,21 @@ bool LSprinter::put(const char* s, size_t len) {
   return true;
 }
 
+#ifdef JS_ENABLE_UWP
+bool UWPPrinter::put(const char* s, size_t len)
+{
+    const char* end = (const char*)memchr(s, '\n', len);
+    if (end) {
+        if (!buffer_.append(s, end - s + 1) || !buffer_.append(0)) {
+            return false;
+        }
+        OutputDebugStringA((const char*)buffer_.begin());
+        buffer_.clear();
+    } else {
+        end = s + len;
+    }
+    return buffer_.append(s, end - s);
+}
+#endif
+
 }  // namespace js
diff --git a/js/src/vm/Printer.h b/js/src/vm/Printer.h
index d2838766a1..e751c7db80 100644
--- a/js/src/vm/Printer.h
+++ b/js/src/vm/Printer.h
@@ -9,6 +9,7 @@
 
 #include "mozilla/Attributes.h"
 #include "mozilla/Range.h"
+#include "mozilla/Vector.h"
 
 #include <stdarg.h>
 #include <stddef.h>
@@ -131,6 +132,18 @@ class Sprinter final : public GenericPrinter {
   virtual void reportOutOfMemory() override;
 };
 
+#ifdef JS_ENABLE_UWP
+class UWPPrinter : public GenericPrinter {
+   mozilla::Vector<uint8_t> buffer_;
+ public:
+   explicit UWPPrinter() {}
+  // Puts |len| characters from |s| at the current position and
+  // return true on success, false on failure.
+  virtual bool put(const char* s, size_t len) override;
+  using GenericPrinter::put;  // pick up |inline bool put(const char* s);|
+};
+#endif
+
 // Fprinter, print a string directly into a file.
 class Fprinter final : public GenericPrinter {
  private:
diff --git a/js/src/wasm/WasmGenerator.cpp b/js/src/wasm/WasmGenerator.cpp
index d367aad0d6..fdd17f373b 100644
--- a/js/src/wasm/WasmGenerator.cpp
+++ b/js/src/wasm/WasmGenerator.cpp
@@ -40,6 +40,8 @@
 
 #include "jit/MacroAssembler-inl.h"
 
+#undef far
+
 using namespace js;
 using namespace js::jit;
 using namespace js::wasm;
